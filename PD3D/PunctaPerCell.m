function [binarycenter,wat, watnew,Seg,finalT,finalT1, posWat] = PunctaPerCell(imfile,watSegmentation,sigma,threshold,ndots,zvox,outputwat_filename)
%% Assigning fluorescent puncta to cells
% Given a watershed segmentation tiff image (generated by ACME and resized to normalize by rescaling voxel size) 
% and in situ image stack, this function calculates the number of puncta
% detected per cell.

% inSitu= '/path/to/filename.tif' 
% 3-D image stack of in situ signal saved as a TIFFfile.

% watSegmentation = '/path/to/filename.tif' TIFF file of watershed
% segmentation.

% sigma = double
% Sigma calculated by automatically fitting Gaussian distribution to puncta in the XY-plane .

% threshold = double
% Universal threshold for normalized LoG filtered image

% ndots = double
% Default should be set to 1. The algorithm will automatically discard
% cells with #puncta<=ndots


%% Apply LoG method to imfile localize puncta to individual pixels
[binarycenter,rmLoG,ims]=LoG_3D_LoGthresh(imfile,threshold,sigma);


%% Import watershed file - resize to be the size of the SABER image
% Note: resizing is necessary because our cell segmentation file is scaled
% with respect to the original image
[wat]=tiff2mat(watSegmentation);
%wat=wat(:,:,[10:34]);
z=size(wat,3); 
for i=1:z
    watnew(:,:,i)=imresize(wat(:,:,i),[size(binarycenter,1) size(binarycenter,2)],'nearest');
end

%% Make table for segmentation info
[Seg]=watTable(double(watnew)); 


%% Size filtration by defined sizes based on normal cell volume
%This returns the corrective factor in x and y
xcorr=size(binarycenter,1)/size(wat,1);
ycorr=size(binarycenter,2)/size(wat,2);

% Calculate original image resolution based on the input for z-resolution
xvox= zvox/xcorr;
yvox= zvox/ycorr;
%% Filter out very large and very small objects
% Suppose cell sizes range from 2.5um diameter to 20um diameter 

% Estimate of maximum cell volume (assume r=1um)
minvol=(4/3)*pi*(1^3); % set volume lower bound by making radius lower bound = 1um
min_vox=minvol/(xvox*yvox*zvox);  % convert volume in um to voxels based on the voxel size of image


% Estimate of maximum cell volume (assume r=8um)
maxvol=(4/3)*pi*(8^3); % set volume upper bound by making radius upper bound = 10um
max_vox=maxvol/(xvox*yvox*zvox); % convert volume in um to voxels based on the voxel size of image

%% Size filtration by defined sizes based estimated min and max cell volumes
[SegSizeFilt,watsizefilt] = SegSizeFilter(Seg,watnew,min_vox,max_vox); 

%% Filter out cells that intersect the image boundary
[SegBoundaryFilt,watboundaryfilt] = SegBoundaryFilter(SegSizeFilt,watsizefilt);

 finalT1=SegBoundaryFilt;
 watfinal=watboundaryfilt;
%finalT1=Seg;
%watfinal=watsizefilt;
%% Calculate number of transcripts per segmented object
pospixels=binarycenter.*double(watfinal);
npos=hist(pospixels(:),finalT1.LabelId)';
npos(1)=size(find(pospixels==finalT1.LabelId(1)),1);
finalT1.npuncta=npos;


%% Find cells containing number of puncta > ndots threshold - save in variable called "finalT"

[finalT] = posCellThresh(finalT1,ndots);

%% Write out watershed for positive cells as tiff file
[posWat] = watCells(double(wat),finalT.LabelId,outputwat_filename);


